/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Context } from './context.js';
import { logUnhandledError } from './log.js';
import { Response } from './response.js';
import { SessionLog } from './sessionLog.js';
import { filteredTools } from './tools.js';
import { packageJSON } from './package.js';
export class BrowserServerBackend {
    name = 'Playwright';
    version = packageJSON.version;
    onclose;
    _tools;
    _context;
    _sessionLog;
    constructor(config, browserContextFactory) {
        this._tools = filteredTools(config);
        this._context = new Context(this._tools, config, browserContextFactory);
    }
    async initialize() {
        this._sessionLog = this._context.config.saveSession ? await SessionLog.create(this._context.config) : undefined;
    }
    tools() {
        return this._tools.map(tool => tool.schema);
    }
    async callTool(schema, parsedArguments) {
        const response = new Response(this._context, schema.name, parsedArguments);
        const tool = this._tools.find(tool => tool.schema.name === schema.name);
        await tool.handle(this._context, parsedArguments, response);
        if (this._sessionLog)
            await this._sessionLog.log(response);
        return await response.serialize();
    }
    serverInitialized(version) {
        this._context.clientVersion = version;
    }
    serverClosed() {
        this.onclose?.();
        void this._context.dispose().catch(logUnhandledError);
    }
}
